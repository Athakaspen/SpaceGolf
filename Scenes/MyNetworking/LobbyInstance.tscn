[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Control

var nickname:String
var max_players:int = 8

var owner_id:int = -1

var players:Dictionary = {}
var my_data = {'name': null, 'transform': null}

func get_cur_players():
	return players.size()

# Called when the node enters the scene tree for the first time.
func _ready():
	if owner_id == get_tree().get_network_unique_id():
		$StartGame.disabled = false

remotesync func create_player(other_player_id, data):
	players[other_player_id] = data
	var new_panel = load(\"res://Scenes/MyNetworking/PlayerPanel.tscn\").instance()
	new_panel.name = str(other_player_id)
	new_panel.updateData(data)
	new_panel.set_network_master(other_player_id)
	$PlayerPanelHolder.add_child(new_panel)

func on_player_joined(new_player_id, data):
	# Only called by server
	if is_network_master():
		for id in players.keys():
			rpc_id(new_player_id, \"create_player\", id, players[id])
		players[new_player_id] = data
		for id in players.keys():
			rpc_id(id, \"create_player\", new_player_id, data)
		create_player(new_player_id, data)

mastersync func on_player_left(other_player_id):
	# Only called by server
	if is_network_master():
		erase_player(other_player_id)
		if players.size() == 0:
			print(\"Lobby Empty, deleting\")
			self.queue_free()
			return
		# If the owner left, make a new player the owner
		if other_player_id == owner_id:
			owner_id = players.keys()[0]
		for id in players.keys():
			rpc_id(id, \"erase_player\", other_player_id)
			rpc_id(id, \"change_owner\", owner_id) # update owner just in case

puppet func change_owner(new_id):
	owner_id = new_id
	if owner_id == get_tree().get_network_unique_id():
		$StartGame.disabled = false

remotesync func erase_player(other_player_id):
	if players.has(other_player_id):
		Notifications.notify(\"%s (%s) has left.\" % [players[other_player_id][\"name\"], other_player_id])
# warning-ignore:return_value_discarded
		players.erase(other_player_id)
	var panel = $PlayerPanelHolder.get_node_or_null(str(other_player_id))
	if panel != null:
		panel.queue_free()



func _on_LeaveLobby_pressed():
	rpc_id(1, \"on_player_left\", get_tree().get_network_unique_id())
	# return to list
# warning-ignore:return_value_discarded
	get_tree().change_scene(\"res://Scenes/MyNetworking/LobbyList.tscn\")
	# remove this lobby from list
	LobbyService.remove_all_lobbies()


func _on_StartGame_pressed():
	rpc_id(1, \"startGame\")
master func startGame():
	# verify room owner started game
	if get_tree().get_rpc_sender_id() == owner_id:
		GameService.start_game(players)
		
		# remove lobby
		for id in players.keys():
			LobbyService.rpc_id(id, \"remove_all_lobbies\")
		self.queue_free()

"

[node name="LobbyInstance" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
script = SubResource( 1 )

[node name="PlayerPanelHolder" type="HFlowContainer" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0

[node name="StartGame" type="Button" parent="."]
margin_left = 526.0
margin_top = 477.0
margin_right = 719.0
margin_bottom = 551.0
disabled = true
text = "Start Game"

[node name="LeaveLobby" type="Button" parent="."]
margin_left = 304.0
margin_top = 477.0
margin_right = 497.0
margin_bottom = 551.0
text = "Leave Lobby"

[connection signal="pressed" from="StartGame" to="." method="_on_StartGame_pressed"]
[connection signal="pressed" from="LeaveLobby" to="." method="_on_LeaveLobby_pressed"]
